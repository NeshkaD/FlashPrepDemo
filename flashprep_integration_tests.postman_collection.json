{
	"info": {
		"_postman_id": "69e7ba02-1a9c-40a8-8534-6cd3318e4bbf",
		"name": "flashprep",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Deck Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Deck ID is equal to 1\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.deckID).to.eql(1);",
							"});",
							"",
							"",
							"pm.test(\"Card count is equal to 3\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.deckCardCount).to.eql(3);",
							"});",
							"",
							"pm.test(\"Deck name is deck1\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.deckName).to.eql(\"deck1\");",
							"});",
							"",
							"pm.test(\"Cards exists\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.cards).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/deck/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"deck",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Next Card From Deck 1 (Adaptive Study Mode)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Card front exists\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.cardFront).to.exist;",
							"});",
							"",
							"pm.test(\"Card back exists\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.cardBack).to.exist;",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/deck/1/card",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"deck",
						"1",
						"card"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Weight For Incorrect Answer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Update is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"",
							"pm.test(\"Update is applied\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.updateApplied).to.eql(true);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"isCorrect\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/deck/1/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"deck",
						"1",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Weight For Correct Answer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Update is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"",
							"pm.test(\"Update is applied\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.updateApplied).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"isCorrect\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/deck/1/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"deck",
						"1",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset Weights For Deck 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Update is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "localhost:8080/deck/1/reset",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"deck",
						"1",
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User login is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.isLoggedIn).to.eql(true);",
							"});",
							"",
							"",
							"pm.test(\"Correct user id is returned from database\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"username1\",\"password\":\"letmein1\"}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/auth",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Decks For User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Deck exists\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/user/1/decks",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"1",
						"decks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"New user creation is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"user_123xyztest1\", \"email\":\"user_123xyztest1@emailservice.com\", \"password\":\"p@ssword1\"}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/user",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user Duplicate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"New user creation is unsuccessful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"user_abc\", \"email\":\"user_abc@emailservice.com\", \"password\":\"p@ssword1\"}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/user",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user"
					]
				}
			},
			"response": []
		}
	]
}